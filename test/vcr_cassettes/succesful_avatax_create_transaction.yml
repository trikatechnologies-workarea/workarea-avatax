---
http_interactions:
- request:
    method: post
    uri: https://sandbox-rest.avatax.com/api/v2/transactions/create
    body:
      encoding: UTF-8
      string: '{"type":"SalesOrder","date":"2017-09-06T15:32:37-04:00","code":"A8A85B403B","customerCode":"epigeon@weblinc.com","customerUsageType":null,"addresses":{"shipFrom":{"Line1":"12
        N 3rd St","city":"Philadelphia","region":"PA","country":"US","postalCode":"19106"},"shipTo":{"line1":"22
        S 3rd St","line2":null,"city":"Philadelphia","region":"PA","country":"US","postalCode":"19106"}},"commit":false,"lines":[{"quantity":2,"amount":"10.00","itemCode":"SKU1","taxCode":"P0000000","description":"Test
        Product","number":1},{"quantity":1,"amount":"1.00","itemCode":"SHIPPING","taxCode":"P0000000","description":"Test
        2","number":2}]}'
    headers:
      Accept:
      - application/json; charset=utf-8
      User-Agent:
      - AvaTax Ruby Gem 17.7.3
      X-Avalara-Client:
      - ";;RubySdk;17.7.3;"
      Authorization:
      - Basic anl1Y2lzLWxwLWF2YXRheEB3ZWJsaW5jLmNvbTpKbXttM05YLlE=
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 201
      message: Created
    headers:
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/json; charset=utf-8
      Location:
      - "/api/v2/companies/0/transactions/0"
      Server:
      - Kestrel
      Serverduration:
      - '00:00:00.0468804'
      Databasecalls:
      - '1'
      Databaseduration:
      - '00:00:00'
      Serviceduration:
      - '00:00:00.0468804'
      Date:
      - Wed, 06 Sep 2017 19:32:37 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 06 Sep 2017 19:32:38 GMT
recorded_with: VCR 2.9.3
