---
http_interactions:
- request:
    method: post
    uri: https://sandbox-rest.avatax.com/api/v2/transactions/create
    body:
      encoding: UTF-8
      string: '{"type":"SalesOrder","date":"2017-06-12T10:51:41-04:00","code":"21D061A4FD","customerCode":"epigeon@weblinc.com","addresses":{"singleLocation":{"Line1":"12
        N 3rd St","city":"Philadelphia","region":"PA","country":"US","postalCode":"19106"}},"lines":[{"quantity":2,"amount":"0.00","itemCode":"SKU1","taxCode":"P0000000","description":"Test
        Product","number":1}]}'
    headers:
      Accept:
      - application/json; charset=utf-8
      User-Agent:
      - AvaTax Ruby Gem 17.5.0
      Content-Type:
      - application/json
      Authorization:
      - Basic ZXBpZ2VvbkB3ZWJsaW5jLmNvbTo2NDhCMEE5ODUx
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 201
      message: Created
    headers:
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/json; charset=utf-8
      Location:
      - "/api/v2/companies/0/transactions/0"
      Server:
      - Kestrel
      Serverduration:
      - '00:00:00.0468801'
      Databasecalls:
      - '4'
      Databaseduration:
      - '00:00:00.0156302'
      Date:
      - Mon, 12 Jun 2017 14:51:41 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 12 Jun 2017 14:51:42 GMT
- request:
    method: post
    uri: https://sandbox-rest.avatax.com/api/v2/transactions/create
    body:
      encoding: UTF-8
      string: '{"type":"SalesOrder","date":"2017-06-12T10:51:42-04:00","code":"21D061A4FD","customerCode":"epigeon@weblinc.com","addresses":{"shipFrom":{"Line1":"12
        N 3rd St","city":"Philadelphia","region":"PA","country":"US","postalCode":"19106"},"shipTo":{"line1":"22
        S 3rd St","line2":null,"city":"Philadelphia","region":"PA","country":"US","postalCode":"19106"}},"lines":[{"quantity":2,"amount":"10.00","itemCode":"SKU1","taxCode":"P0000000","description":"Test
        Product","number":1},{"quantity":1,"amount":"1.00","itemCode":"SHIPPING","taxCode":null,"description":"Test
        2","number":2}]}'
    headers:
      Accept:
      - application/json; charset=utf-8
      User-Agent:
      - AvaTax Ruby Gem 17.5.0
      Content-Type:
      - application/json
      Authorization:
      - Basic ZXBpZ2VvbkB3ZWJsaW5jLmNvbTo2NDhCMEE5ODUx
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 201
      message: Created
    headers:
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/json; charset=utf-8
      Location:
      - "/api/v2/companies/0/transactions/0"
      Server:
      - Kestrel
      Serverduration:
      - '00:00:00.0633515'
      Databasecalls:
      - '4'
      Databaseduration:
      - '00:00:00.0008445'
      Date:
      - Mon, 12 Jun 2017 14:51:43 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 12 Jun 2017 14:51:43 GMT
recorded_with: VCR 2.9.3
